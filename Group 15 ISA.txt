0	0000000	add $8, $18,$0	
1	0000001	add $10, $0, $8                   	# To calculate the modulus 17 we make succesive substractions
2	0000010	add $10, $0, $14                    	# If not: then current score will be saved as best score
3	0000011	add $10, $18, $0	
4	0000100	add $13, $13, $14                   	# We add the result of the hamming count. If it's zero, then nothing happens
5	0000101	add $13, $0, $0                     	# We will be storing the hamming distance in $13, therefore, we load a 0
6	0000110	add $13, $10, $0	
7	0000111	add $14, $8, $0    	
8	0001000	add $14, $10, $0                   	# the base is elevated to the power of two
9	0001001	add $18, $18, $14      			# We add the value $14 to the register $18
10	0001010	addi $8, $0, 1	
11	0001011	addi $10, $0, 6                      	# constant 6 is loaded into register 10
12	0001100	addi $11, $0, 20                    	# We store the number of words in the array, usfeul for oops
13	0001101	addi $10, $10, -17  	
14	0001110	addi $11, $11, -1         	
15	0001111	addi $12, $0, 0x2000             	# Load the data address in $12 useful for loading operands
16	0010000	addi $12, $0, 17                   	# We load a 17 for the modulus
17	0010001	addi $13, $13, -1 	
18	0010010	addi $14, $0, 32	
19	0010011	addi $15, $0, 0x2000                 	# start address of the data is stored in $15
20	0010100	addi $15, $0, 0x2004                	# We store the address to which the result shall be saved in the register $15
21	0010101	addi $15, $0, 20                   	# numbers of words in the array
22	0010110	addi $15, $15, -1                   	# We must do this for all words in the array
23	0010111	addi $15, $0, 0                     	# Counter of scores
24	0011000	addi $15, $15, 1                    	# If they are equal, the score is incremented 
25	0011001	addi $17, $17, 4                     	# advance to next array word
26	0011010	addi $17, $15, 0xC                  	# address of the array is stored in $17
27	0011011	addi $17, $17, 4                    	# Move to the next position in the array
28	0011100	addi $17, $0, 0x2004     	
29	0011101	addi $17, $0, 0x205C                	# Here we save start address of score array in $
30	0011110	addi $17, $0, 0x2008               	# We recover the given address to store result
31	0011111	addi $18, $0, 0	
32	0100000	andi $11, $15, 1                   	# If not: it gets lowest bit value by andi operation between $15 and  1
33	0100001	andi $14, $16, 1                    	# With the handy andi, we get the most significant bit
34	0100010	beq  $11, $0, Continue 	
35	0100011	beq  $11, $0, EndOfProgram	
36	0100100	beq  $13, $0, ReturnToPrevious      	# If one Operand is zero we return, since the result is zero
37	0100101	beq  $14, $0, ReturnToPrevious     	# If one Operand is zero we return, since the result is zero
38	0100110	beq  $15, $0, ExponentZero         	# If Exponent is Zero we go to ExponentZero
39	0100111	beq  $16, $0, endHamming	
40	0101000	bne $11, $0, ReturnToPrevious	
41	0101001	bne $13, $0, SkipSaving	
42	0101010	bne $15, $0, LoopWords	
43	0101011	bne $10, $16, NextStep			# If it is lower, then nothing will happen
44	0101100	j    MainLoop                       	# Jump to Mainloop
45	0101101	j    SecondaryLoop                  	# We keep goint until $13 is zero
46	0101110	j    EXIT	
47	0101111	j    Modulus                        	# Keep calculating modulus
48	0110000	j    Hamming                        	# Keep looping
49	0110001	j    LoopScores	
50	0110010	jal Multiplication	
51	0110011	jal Modulus	
52	0110100	jal IncrementCount  	
53	0110101	jr  $31	
54	0110110	lw  $10, 4($15)                   	# The current best matching score is loading into $10 from memory
55	0110111	lw  $11, 0($15)                    	# pattern is loaded into $11
56	0111000	lw  $15, 0($12)                    	# the exponent is loaded into 15
57	0111001	lw  $16, 0($17)                    	# We load a score from array
58	0111010	slt $11, $10, $12                  	# If we found out that the number is already lower thant seventeen, then we're done
59	0111011	slt $13, $14, $10                 	# If the score is lower than the best, we will not save it
60	0111100	srl $15, $15, 1                    	# it advances to the next bit
61	0111101	srl $16, $16, 1                   	# We shift to compare with the next bit   
62	0111110	sub $14, $14, $13			# Calculation of score
63	0111111	sw  $8, 4($12)                    	# it saves 1 in the result because if the exponent is 0
64	1000000	sw  $10, 0($17)                    	# We save the best score in the given address
65	1000001	sw  $10, 0($15)       			# We save the result
66	1000010	sw  $14, 80($17)                  	# Calculate direction is score array
67	1000011	sw  $15, 0($17)                   	# the result is stored back into data
68	1000100	xor $16, $16, $11                  	# The xor will give us the information needed to count for the hamming distance